"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Label } from "@/components/ui/label";
import { PlusCircle, Pencil, Trash2 } from "lucide-react";
import { Customer } from "@/types";

/**
 * CustomersPage component for managing customer data
 * Provides CRUD functionality for customers
 */
export default function CustomersPage() {
  // State for customer data and UI controls
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [isAddDialogOpen, setIsAddDialogOpen] = useState<boolean>(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState<boolean>(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState<boolean>(false);
  const [currentCustomer, setCurrentCustomer] = useState<Customer | null>(null);
  const [formData, setFormData] = useState({
    name: "",
  });

  /**
   * Load mock customer data on component mount
   * In a real application, this would fetch data from an API
   */
  useEffect(() => {
    // Mock data for demonstration
    setCustomers([
      {
        id: 1,
        name: "Acme Corporation",
        is_deleted: false,
        created_at: "2023-01-01T00:00:00Z",
        modified_at: "2023-01-01T00:00:00Z",
      },
      {
        id: 2,
        name: "Globex Industries",
        is_deleted: false,
        created_at: "2023-01-02T00:00:00Z",
        modified_at: "2023-01-02T00:00:00Z",
      },
      {
        id: 3,
        name: "Initech LLC",
        is_deleted: false,
        created_at: "2023-01-03T00:00:00Z",
        modified_at: "2023-01-03T00:00:00Z",
      },
    ]);
  }, []);

  /**
   * Handle form input changes
   * @param e - Input change event
   */
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  /**
   * Format date string to a more readable format
   * @param dateString - ISO date string
   * @returns Formatted date string
   */
  const formatDate = (dateString: string): string => {
    if (!dateString) return "N/A";
    return new Date(dateString).toLocaleDateString();
  };

  /**
   * Validate customer form data
   * @returns Object with validation result and error message
   */
  const validateCustomerForm = (): {
    isValid: boolean;
    errorMessage: string;
  } => {
    if (!formData.name.trim()) {
      return { isValid: false, errorMessage: "Customer name is required." };
    }

    return { isValid: true, errorMessage: "" };
  };

  /**
   * Handle adding a new customer
   */
  const handleAddCustomer = () => {
    const validation = validateCustomerForm();
    if (!validation.isValid) {
      // In a real app, you would show the error message to the user
      console.error(validation.errorMessage);
      return;
    }

    // Create new customer
    const newCustomer: Customer = {
      id: Math.floor(Math.random() * 1000), // In a real app, this would be generated by the backend
      name: formData.name,
      is_deleted: false,
      created_at: new Date().toISOString(),
      modified_at: new Date().toISOString(),
    };

    // Add to customers list
    setCustomers([...customers, newCustomer]);

    // Reset form and close dialog
    setFormData({
      name: "",
    });
    setIsAddDialogOpen(false);
  };

  /**
   * Open the edit dialog for a customer
   * @param customer - The customer to edit
   */
  const openEditDialog = (customer: Customer) => {
    setCurrentCustomer(customer);
    setFormData({
      name: customer.name,
    });
    setIsEditDialogOpen(true);
  };

  /**
   * Handle editing an existing customer
   */
  const handleEditCustomer = () => {
    if (!currentCustomer) return;

    const validation = validateCustomerForm();
    if (!validation.isValid) {
      // In a real app, you would show the error message to the user
      console.error(validation.errorMessage);
      return;
    }

    // Update customer in the list
    const updatedCustomers = customers.map((customer) =>
      customer.id === currentCustomer.id
        ? {
            ...customer,
            name: formData.name,
            modified_at: new Date().toISOString(),
          }
        : customer
    );

    setCustomers(updatedCustomers);
    setIsEditDialogOpen(false);
  };

  /**
   * Open the delete dialog for a customer
   * @param customer - The customer to delete
   */
  const openDeleteDialog = (customer: Customer) => {
    setCurrentCustomer(customer);
    setIsDeleteDialogOpen(true);
  };

  /**
   * Handle deleting a customer
   */
  const handleDeleteCustomer = () => {
    if (!currentCustomer) return;

    // In a real app, you might want to soft delete by setting is_deleted to true
    // Here we're removing from the array for simplicity
    const updatedCustomers = customers.filter(
      (customer) => customer.id !== currentCustomer.id
    );

    setCustomers(updatedCustomers);
    setIsDeleteDialogOpen(false);
  };

  return (
    <div className="container mx-auto py-10">
      <Card>
        <CardHeader>
          <CardTitle className="text-2xl font-bold">Customers</CardTitle>
          <CardDescription>
            Manage your customer information and details.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex justify-end mb-4">
            <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
              <DialogTrigger asChild>
                <Button className="flex items-center gap-2">
                  <PlusCircle className="h-4 w-4" />
                  Add Customer
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>Add Customer</DialogTitle>
                  <DialogDescription>
                    Add a new customer to your database.
                  </DialogDescription>
                </DialogHeader>
                <div className="grid gap-4 py-4">
                  <div className="grid grid-cols-4 items-center gap-4">
                    <Label htmlFor="name" className="text-right">
                      Customer Name
                    </Label>
                    <Input
                      id="name"
                      name="name"
                      value={formData.name}
                      onChange={handleInputChange}
                      className="col-span-3"
                      required
                    />
                  </div>
                </div>
                <DialogFooter>
                  <Button
                    variant="outline"
                    onClick={() => setIsAddDialogOpen(false)}
                  >
                    Cancel
                  </Button>
                  <Button onClick={handleAddCustomer}>Create</Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          </div>

          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Customer Name</TableHead>
                <TableHead>Created</TableHead>
                <TableHead>Last Modified</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {customers.map((customer) => (
                <TableRow key={customer.id}>
                  <TableCell className="font-medium">{customer.name}</TableCell>
                  <TableCell>{formatDate(customer.created_at)}</TableCell>
                  <TableCell>{formatDate(customer.modified_at)}</TableCell>
                  <TableCell className="text-right">
                    <div className="flex justify-end gap-2">
                      <Button
                        variant="outline"
                        size="icon"
                        onClick={() => openEditDialog(customer)}
                      >
                        <Pencil className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="destructive"
                        size="icon"
                        onClick={() => openDeleteDialog(customer)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
              {customers.length === 0 && (
                <TableRow>
                  <TableCell colSpan={4} className="text-center py-4">
                    No customers found. Add a customer to get started.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* Edit Customer Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Edit Customer</DialogTitle>
            <DialogDescription>
              Update the customer information.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="edit-name" className="text-right">
                Customer Name
              </Label>
              <Input
                id="edit-name"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                className="col-span-3"
                required
              />
            </div>
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setIsEditDialogOpen(false)}
            >
              Cancel
            </Button>
            <Button onClick={handleEditCustomer}>Save Changes</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Confirm Deletion</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete {currentCustomer?.name}? This
              action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setIsDeleteDialogOpen(false)}
            >
              Cancel
            </Button>
            <Button variant="destructive" onClick={handleDeleteCustomer}>
              Delete
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
